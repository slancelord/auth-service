// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Logout user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Session not found or failed to logout",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Refreshes the token pair using a valid access token and refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access and refresh tokens",
                "parameters": [
                    {
                        "description": "Tokens for refresh",
                        "name": "tokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access and refresh tokens",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to generate new tokens or save session",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/token": {
            "post": {
                "description": "Generates access and refresh tokens using a user GUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get tokens",
                "parameters": [
                    {
                        "enum": [
                            "Mozilla/5.0",
                            "Opera/9.80"
                        ],
                        "type": "string",
                        "description": "User Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing GUID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to generate tokens",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the GUID of the currently authenticated user using a valid access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user ID",
                "responses": {
                    "200": {
                        "description": "User GUID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Missing or invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.TokenRequest": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
